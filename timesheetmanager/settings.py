"""
Django settings for timesheetmanager project.

Generated by 'django-admin startproject' using Django 1.9.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

from django.conf.global_settings import LOGGING
from django.contrib import messages


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'tdbcz%oo&hha2)z_=5&dk77=5025hayj1c86)y1(c)i!dexnr0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

LOGIN_URL = "/user/login/"
LOGIN_REDIRECT_URL = "/user/"


# Application definition

INSTALLED_APPS = [
	'identity.apps.IdentityConfig',
	'django.contrib.humanize',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

MESSAGE_TAGS = {
    messages.DEBUG: 'info',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}

ROOT_URLCONF = 'timesheetmanager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
				'identity.apps.mapped_languages',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

WSGI_APPLICATION = 'timesheetmanager.wsgi.application'

LOGGER_FILES_ROOT = os.path.join(BASE_DIR, 'log')

os.makedirs(LOGGER_FILES_ROOT, exist_ok = True)

LOGGER_FILES = {
	'django.debug.simple': os.path.join(LOGGER_FILES_ROOT, 'debug-simple.log'),
	'django.debug.complete': os.path.join(LOGGER_FILES_ROOT, 'debug-complete.log'),
}

for key in LOGGER_FILES:
	if not os.path.exists(LOGGER_FILES[key]):
		with open(LOGGER_FILES[key], "w") as lf:
			lf.write("")

LOGGING = {
	'version': 1,
	"disable_existing_loggers": False,
	'formatters': {
        'complete': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
	'handlers': {
        'django.debug.simple': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'simple',
            'filename': os.path.join(BASE_DIR, 'log/debug-simple.log'),
        },
        'django.debug.complete': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'formatter': 'complete',
            'filename': os.path.join(BASE_DIR, 'log/debug-complete.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['django.debug.simple', 'django.debug.complete'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
__postgresql = {
	'ENGINE': 'django.db.backends.postgresql',
	'NAME': 'timesheetdb',
	'USER': 'identity',
	'PASSWORD': 't1m3sh33t',
	'CHARSET': 'UTF-8',
	'ATOMIC_REQUESTS': True
}

__sqlite3 = {
	'ENGINE': 'django.db.backends.sqlite3',
	'NAME': os.path.join(BASE_DIR, 'db.sqlite3')
}

DATABASES = {
    'default': __sqlite3
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'translations'),
)


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Brasilia'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

if DEBUG:
	DJANGO_LOG_LEVEL = DEBUG
